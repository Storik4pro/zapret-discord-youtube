name: Convert BAT â†’ JSON and Create Draft Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Tag or release version to use for downloading source (e.g. v1.8.3)'
        required: true
      exclude:
        description: 'Comma-separated .bat filenames to exclude (default: service.bat)'
        required: false
        default: 'service.bat'
      target_version:
        description: 'Target version to write into JSON target[1] (e.g. 71.2)'
        required: false
        default: '71.2'
      exclude_exts:
        description: 'Comma-separated extensions to exclude from package (e.g. .exe,.dll). Default: .exe,.dll'
        required: false
        default: ''

permissions:
  contents: write

jobs:
  convert_and_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo (workflow + convert.py)
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install helper tools (jq unzip)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq unzip curl zip

      - name: Download source zip for the specified tag
        id: download
        run: |
          set -e
          VER="${{ inputs.version }}"
          SRC_ZIP=source.zip
          echo "Downloading Flowseal/zapret-discord-youtube tag ${VER}..."
          curl -L -o "$SRC_ZIP" "https://github.com/Flowseal/zapret-discord-youtube/archive/refs/tags/${VER}.zip"
          unzip -q "$SRC_ZIP" -d src
          ROOT=$(ls src | head -n1)
          echo "root=$ROOT" >> $GITHUB_OUTPUT

      - name: Run conversion + package creation
        env:
          EXCLUDE_RAW: ${{ inputs.exclude }}
          TARGET_VERSION: ${{ inputs.target_version }}
          EXCLUDE_EXTS: ${{ inputs.exclude_exts }}
        run: |
          set -e
          ROOT="${{ steps.download.outputs.root }}"
          echo "Using extracted root: src/$ROOT"
          rm -rf output_jsons package_temp zapret-discord-youtube.zip || true
          mkdir -p output_jsons
          # Args: <source_root> <output_json_folder> <package_dir> <zip_output_path> [exclude_bat_csv] [exclude_ext_csv] [target_version]
          python -u convert.py "src/$ROOT" output_jsons package_temp zapret-discord-youtube.zip "$EXCLUDE_RAW" "$EXCLUDE_EXTS" "$TARGET_VERSION"

          echo "Files produced:"
          ls -la output_jsons || true
          echo "Package contents (top level):"
          ls -la package_temp || true
          echo "Zip size:"
          ls -lh zapret-discord-youtube.zip || true

      - name: Try to read release notes/body from upstream release (if exists)
        id: get_body
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          VER="${{ inputs.version }}"
          API="https://api.github.com/repos/Flowseal/zapret-discord-youtube/releases/tags/${VER}"
          resp=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" "$API")
          body=$(echo "$resp" | jq -r '.body // ""')
          echo "RELEASE_BODY<<EOF" >> $GITHUB_OUTPUT
          echo "$body" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create draft release and upload asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          OWNER="Storik4pro"
          REPO="zapret-discord-youtube"
          TAG="${{ inputs.version }}"
          BODY="${{ steps.get_body.outputs.RELEASE_BODY }}"

          echo "Creating draft release for ${OWNER}/${REPO} tag ${TAG} ..."
          payload=$(jq -n --arg tag "$TAG" --arg name "$TAG" --arg body "$BODY" '{tag_name:$tag, name:$name, body:$body, draft:true, prerelease:false}')
          create_resp=$(curl -s -X POST "https://api.github.com/repos/${OWNER}/${REPO}/releases" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            -d "$payload")

          RELEASE_ID=$(echo "$create_resp" | jq -r '.id')
          UPLOAD_URL_TEMPLATE=$(echo "$create_resp" | jq -r '.upload_url')

          if [ -z "$RELEASE_ID" ] || [ "$RELEASE_ID" = "null" ] || [ -z "$UPLOAD_URL_TEMPLATE" ]; then
            echo "Failed to create release:"
            echo "$create_resp"
            exit 1
          fi

          UPLOAD_URL="${UPLOAD_URL_TEMPLATE%\{*}?name=zapret-discord-youtube.zip"
          echo "Uploading asset to $UPLOAD_URL ..."
          curl --fail -s -X POST "$UPLOAD_URL" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/zip" \
            --data-binary @zapret-discord-youtube.zip

          echo "Draft release created (ID: $RELEASE_ID) and asset uploaded."

      - name: Done
        run: echo "Workflow finished. Check Releases in Storik4pro/zapret-discord-youtube for the draft."
